import pandas as pd
import os
import time
import streamlit as st

# Chemins des fichiers
excel_file = 'Equipement_Annexe.xlsx'
result_file = 'resultat.xlsx'
stop_file = 'stop_signal.txt'

# Créer le fichier d'équipement s'il n'existe pas
if not os.path.exists(excel_file):
    df = pd.DataFrame(columns=['Marque', 'Modèle', 'Description'])
    df.to_excel(excel_file, index=False)

df = pd.read_excel(excel_file)

# Créer le fichier de résultats s'il n'existe pas
if not os.path.exists(result_file):
    result_df = pd.DataFrame(columns=['Marque', 'Modèle', 'CVE', 'Date de Publication', 'Source'])
    result_df.to_excel(result_file, index=False)

result_df = pd.read_excel(result_file)

# Afficher la base de données des équipements
st.title("Gestion des équipements")

# Formulaire de sélection des actions
action = st.radio("Choisissez une action", [
    "Ajouter",
    "Supprimer",
    "Modifier",
    "Afficher l'historique des recherches",
    "Arrêter le scraping"
])

if action == "Ajouter":
    # Formulaire pour ajouter un périphérique
    st.subheader("Ajouter un périphérique")
    marque = st.text_input("Marque du périphérique")
    modele = st.text_input("Modèle du périphérique")
    description = st.text_area("Description du périphérique")

    if st.button("Ajouter périphérique"):
        if marque and modele and description:
            new_data = pd.DataFrame([{
                "Marque": marque,
                "Modèle": modele,
                "Description": description
            }])
            df = pd.concat([df, new_data], ignore_index=True)
            df.to_excel(excel_file, index=False)
            st.success(f"Périphérique '{modele}' ajouté avec succès !")
        else:
            st.error("Veuillez remplir tous les champs du périphérique.")

elif action == "Supprimer":
    # Fonctionnalité de suppression
    st.subheader("Supprimer un périphérique")
    modele_to_delete = st.text_input("Modèle du périphérique à supprimer")

    if st.button("Supprimer périphérique"):
        if modele_to_delete in df['Modèle'].values:
            df = df[df['Modèle'] != modele_to_delete]
            df.to_excel(excel_file, index=False)
            st.success(f"Périphérique avec modèle '{modele_to_delete}' supprimé avec succès !")
        else:
            st.error(f"Périphérique avec modèle '{modele_to_delete}' non trouvé.")

elif action == "Modifier":
    # Fonctionnalité de modification
    st.subheader("Modifier un périphérique")
    modele_to_modify = st.text_input("Modèle du périphérique à modifier")
    new_marque = st.text_input("Nouvelle marque du périphérique")
    new_modele = st.text_input("Nouveau modèle du périphérique")
    new_description = st.text_area("Nouvelle description du périphérique")

    if st.button("Modifier périphérique"):
        if modele_to_modify in df['Modèle'].values:
            df.loc[df['Modèle'] == modele_to_modify, ['Marque', 'Modèle', 'Description']] = [new_marque, new_modele, new_description]
            df.to_excel(excel_file, index=False)
            st.success(f"Périphérique avec modèle '{modele_to_modify}' modifié !")
        else:
            st.error(f"Périphérique avec modèle '{modele_to_modify}' non trouvé.")

elif action == "Afficher l'historique des recherches":
    # Afficher l'historique des recherches CVE
    st.subheader("Historique des recherches CVE")
    st.dataframe(result_df)


#arreter le scraping:

def stop_scraping():
    # Créez un fichier de signalisation pour arrêter le scraping
    with open("stop_scraping.txt", "w") as f:
        f.write("stop")
    print("Le scraping a été arrêté.")  # Message dans le terminal

# Interface Streamlit
st.title("Interface de gestion du scraping")
if st.button("Arrêter le scraping"):
    stop_scraping()
    st.write("Le scraping a été arrêté.")

    
